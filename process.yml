# Orb 'circleci/docker@1.4.0' resolved to 'circleci/docker@1.4.0'
version: 2
jobs:
  docker/publish:
    machine:
      docker_layer_caching: false
      image: ubuntu-1604:201903-01
    steps:
    - checkout
    - run:
        command: |
          if [[ DOCKER_LOGIN == "" ]]; then
            echo "No required environment variables to check; moving on"
          else
            IFS="," read -ra PARAMS <<< "DOCKER_LOGIN"

            for i in "${PARAMS[@]}"; do
              if [[ -z "${!i}" ]]; then
                echo "ERROR: Missing environment variable {i}" >&2

                if [[ -n "" ]]; then
                  echo "" >&2
                fi

                exit 1
              else
                echo "Yes, ${i} is defined!"
              fi
            done
          fi
        name: Checking if parameters are defined...
    - run:
        command: |
          if [[ DOCKER_PASSWORD == "" ]]; then
            echo "No required environment variables to check; moving on"
          else
            IFS="," read -ra PARAMS <<< "DOCKER_PASSWORD"

            for i in "${PARAMS[@]}"; do
              if [[ -z "${!i}" ]]; then
                echo "ERROR: Missing environment variable {i}" >&2

                if [[ -n "" ]]; then
                  echo "" >&2
                fi

                exit 1
              else
                echo "Yes, ${i} is defined!"
              fi
            done
          fi
        name: Checking if parameters are defined...
    - run:
        command: |
          HELPER_NAME=""
          if [ -z "${HELPER_NAME}" ]; then
            if [ -n "$(uname | grep "Darwin")" ]; then
              HELPER_NAME="osxkeychain"
            else
              HELPER_NAME="pass"
            fi
          fi

          HELPER_FILENAME="docker-credential-${HELPER_NAME}"

          if which "$HELPER_FILENAME" > /dev/null 2>&1; then
            echo "$HELPER_FILENAME is already installed"
            exit 0
          fi

          SUDO=""
          if [ $(id -u) -ne 0 ] && which sudo > /dev/null 2>&1 ; then
            SUDO="sudo"
          fi

          # Create heredoc template here due to tab indentation issue
          GPG_TEMPLATE=$(mktemp gpg_template.XXXXXX)
          cat > $GPG_TEMPLATE <<-EOF
          Key-Type: RSA
          Key-Length: 2048
          Name-Real: CircleCI Orb User
          Name-Email: circleci-orbs@circleci.com
          Expire-Date: 0
          %no-protection
          %no-ask-passphrase
          %commit
          EOF

          if [ "$HELPER_FILENAME" = "docker-credential-pass" ]; then
            # Install pass which is needed for docker-credential-pass to work
            $SUDO apt-get update --yes && $SUDO apt-get install gnupg2 pass --yes

            # Initialize pass with a gpg key
            gpg2 --batch --gen-key "$GPG_TEMPLATE"

            FINGERPRINT_STRING=$(gpg2 \
              --list-keys --with-fingerprint --with-colons \
              circleci-orbs@circleci.com | \
              grep fpr)
            # use colon delimiters to separate fingerprint
            arrFINGERPRINT=(${FINGERPRINT_STRING//:/ })
            FINGERPRINT=${arrFINGERPRINT[-1]}
            pass init $FINGERPRINT
          fi
          rm "$GPG_TEMPLATE"

          echo "Downloading credential helper $HELPER_FILENAME"
          BIN_PATH="/usr/local/bin"
          mkdir -p "$BIN_PATH"
          RELEASE_TAG=""
          RELEASE_VERSION=$(curl -Ls --fail --retry 3 -o /dev/null -w %{url_effective} "https://github.com/docker/docker-credential-helpers/releases/latest" | sed 's:.*/::')
          if [ -n "${RELEASE_TAG}" ]; then
            RELEASE_VERSION="${RELEASE_TAG}"
          fi
          DOWNLOAD_URL="https://github.com/docker/docker-credential-helpers/releases/download/${RELEASE_VERSION}/${HELPER_FILENAME}-${RELEASE_VERSION}-amd64.tar.gz"

          echo "Downloading from url: $DOWNLOAD_URL"
          curl -L -o "${HELPER_FILENAME}_archive" "$DOWNLOAD_URL"
          tar xvf "./${HELPER_FILENAME}_archive"
          chmod +x "./$HELPER_FILENAME"

          $SUDO mv "./$HELPER_FILENAME" "$BIN_PATH/$HELPER_FILENAME"
          "$BIN_PATH/$HELPER_FILENAME" version
          rm "./${HELPER_FILENAME}_archive"
        name: Install Docker credential helper
    - run:
        command: |
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          # check if jq needs to be installed
          if command -v jq >> /dev/null 2>&1; then

              echo "jq is already installed..."

            if [[ false == true ]]; then
              echo "removing it."
              $SUDO rm -f $(command -v jq)
            else
              echo "ignoring install request."
              exit 0
            fi
          fi

          # Set jq version
          if [[ latest == "latest" ]]; then
            JQ_VERSION=$(curl -Ls -o /dev/null -w %{url_effective} "https://github.com/stedolan/jq/releases/latest" | sed 's:.*/::')
            echo "Latest version of jq is $JQ_VERSION"
          else
            JQ_VERSION=latest
          fi

          # extract version number
          JQ_VERSION_NUMBER_STRING=$(echo $JQ_VERSION | sed -E 's/-/ /')
          arrJQ_VERSION_NUMBER=($JQ_VERSION_NUMBER_STRING)
          JQ_VERSION_NUMBER="${arrJQ_VERSION_NUMBER[1]}"

          # Set binary download URL for specified version
          # handle mac version
          if uname -a | grep Darwin > /dev/null 2>&1; then
            JQ_BINARY_URL="https://github.com/stedolan/jq/releases/download/${JQ_VERSION}/jq-osx-amd64"
          else
            # linux version
            JQ_BINARY_URL="https://github.com/stedolan/jq/releases/download/${JQ_VERSION}/jq-linux64"
          fi

          jqBinary="jq-$PLATFORM"

          if [ -d "$JQ_VERSION/sig" ]; then
            # import jq sigs

            if uname -a | grep Darwin > /dev/null 2>&1; then
              HOMEBREW_NO_AUTO_UPDATE=1 brew install gnupg coreutils

              PLATFORM=osx-amd64
            else
              if cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                $SUDO apk add gnupg > /dev/null 2>&1
              fi
              PLATFORM=linux64
            fi

            gpg --import "$JQ_VERSION/sig/jq-release.key" > /dev/null

            curl --output "$JQ_VERSION/sig/v$JQ_VERSION_NUMBER/jq-$PLATFORM" \
                --silent --show-error --location --fail --retry 3 \
                "$JQ_BINARY_URL"

            # verify sha256sum, sig, install

            gpg --verify "$JQ_VERSION/sig/v$JQ_VERSION_NUMBER/jq-$PLATFORM.asc"

            pushd "$JQ_VERSION/sig/v$JQ_VERSION_NUMBER" && grep "jq-$PLATFORM" "sha256sum.txt" | \
            sha256sum -c -
            popd
            jqBinary="$JQ_VERSION/sig/v$JQ_VERSION_NUMBER/jq-$PLATFORM"

          else
            curl --output "$jqBinary" \
              --silent --show-error --location --fail --retry 3 \
              "$JQ_BINARY_URL"
          fi

          $SUDO mv "$jqBinary" /usr/local/bin/jq
          $SUDO chmod +x /usr/local/bin/jq

          # cleanup
          [[ -d "./$JQ_VERSION" ]] && rm -rf "./$JQ_VERSION"

          # verify version
          echo "jq has been installed to $(which jq)"
          echo "jq version:"
          echo "$(jq --version)"
        name: Install jq
    - run:
        command: |
          HELPER_NAME=""
          if [ -z "${HELPER_NAME}" ]; then
            if [ -n "$(uname | grep "Darwin")" ]; then
              HELPER_NAME="osxkeychain"
            else
              HELPER_NAME="pass"
            fi
          fi

          if [ ! -f "$HOME/.docker/config.json" ]; then
            echo "$HOME/.docker/config.json does not exist; initializing it.."
            mkdir -p $(dirname $HOME/.docker/config.json)
            echo "{}" > $HOME/.docker/config.json
          fi

          cat $HOME/.docker/config.json \
            | jq --arg credsStore "$HELPER_NAME" '. + {credsStore: $credsStore}' \
            > /tmp/docker-config-credsstore-update.json
          cat /tmp/docker-config-credsstore-update.json > $HOME/.docker/config.json
          rm /tmp/docker-config-credsstore-update.json
        name: Configure Docker credentials store
    - run:
        command: |
          echo "$DOCKER_PASSWORD" \
            | docker login -u "$DOCKER_LOGIN" \
                --password-stdin docker.io
        name: Docker login
    - run:
        command: |
          docker_tag_args=""

          IFS="," read -ra DOCKER_TAGS <<< "$CIRCLE_SHA1"
          for tag in "${DOCKER_TAGS[@]}"; do
            docker_tag_args="$docker_tag_args -t docker.io/victorgrubio/ecommerce-backend-spring:${tag}"
          done

          docker build  \
            -f ./Dockerfile \
            $docker_tag_args \
            .
        name: Docker build
    - deploy:
        command: |
          IFS="," read -ra DOCKER_TAGS <<< "$CIRCLE_SHA1"
          for tag in "${DOCKER_TAGS[@]}"; do
            docker push docker.io/victorgrubio/ecommerce-backend-spring:${tag}
          done

          if [ -n "" ]; then
            mkdir -p "$(dirname )"
            IFS="," read -ra DOCKER_TAGS <<< "$CIRCLE_SHA1"
            docker image inspect --format="{{index .RepoDigests 0}}" docker.io/victorgrubio/ecommerce-backend-spring:"${DOCKER_TAGS[0]}" > ""
          fi
        name: Docker push
workflows:
  docker_build_push:
    jobs:
    - docker/publish:
        context: Docker
  version: 2

# Original config.yml file:
# version: 2.1
# orbs:
#   docker: circleci/docker@1.4.0
# workflows:
#   docker_build_push:
#     jobs:
#       - docker/publish:
#           context: Docker
#           image: victorgrubio/ecommerce-backend-spring
#           use-docker-credentials-store: true